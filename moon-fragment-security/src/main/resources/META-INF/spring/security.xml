<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd">

    <!-- Shiro安全管理器 -->
    <bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
        <!-- Single realm app. If you have multiple realms, use the 'realms' property instead. -->
        <property name="realm" ref="jwtRealm"/>
        <property name="subjectDAO.sessionStorageEvaluator.sessionStorageEnabled" value="false"/>
        <property name="subjectFactory" ref="subjectFactory"/>
        <property name="sessionManager" ref="sessionManager"/>
    </bean>
    
    <!-- Subject工厂 -->
    <bean id="subjectFactory" class="org.moonframework.fragment.security.StatelessDefaultSubjectFactory"/>
    
    <!-- 会话管理器   -->
    <bean id="sessionManager" class="org.apache.shiro.session.mgt.DefaultSessionManager">
        <property name="sessionValidationSchedulerEnabled" value="false"/><!-- 禁用掉会话调度器 -->
    </bean>

    <!-- 自定义, 覆盖默认的实现, 增加处理异步请求的逻辑实现 -->
    <bean id="statelessAuthenticationFilter" class="org.moonframework.fragment.security.StatelessAuthenticationFilter">
    </bean>

    <!-- Shiro Filter -->
    <!-- define the web-enabled SecurityManager and the 'shiroFilter' bean that will be referenced from web.xml. -->
    <bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
        <property name="securityManager" ref="securityManager"/>
        <property name="loginUrl" value="${moon.security.cas.filter.loginUrl}"/>
        <property name="successUrl" value="${moon.security.cas.filter.successUrl}"/>
        <!-- The 'filters' property is not necessary since any declared javax.servlet.Filter bean  -->
        <!-- defined will be automatically acquired and available via its beanName in chain        -->
        <!-- definitions, but you can perform instance overrides or name aliases here if you like: -->
        <property name="filters">
            <map>
                <!-- <entry key="logout" value-ref="logoutFilter"/> -->
                <entry key="authc" value-ref="statelessAuthenticationFilter"/>
                <!-- <entry key="anon" value-ref="webAnonymousFilter"/> -->
            </map>
        </property>
        <!-- Finally, you have to define the security of your application. -->
        <!-- http://shiro.apache.org/web.html#Web-defaultfilters, e.g: /protected/** = roles[ROLE_ADMIN] -->
        <property name="filterChainDefinitions">
            <value>
                <!--/logout = logout 注销应该在前端执行，手动删除保存的token就可以了 -->
                /** = authc
            </value>
        </property>
    </bean>

    <bean id="jwtRealm" class="org.moonframework.fragment.security.JwtRealm" autowire="byName">
        <!-- <property name="authorizationService" ref="usersServiceImpl"/> -->
        <property name="jwtTokenUtil" ref="jwtTokenUtil"/>
        <!-- <property name="defaultRoles" value="${moon.security.cas.realm.defaultRoles}"></property> -->
    </bean>
    
    <bean id="jwtTokenUtil" class="org.moonframework.fragment.security.JwtTokenUtil"/>

    <!-- Shiro生命周期处理器-->
    <bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor"/>

    <!-- Enable Shiro Annotations for Spring-configured beans.  Only run after -->
    <!-- the lifecycleBeanProcessor has run: -->
    <!-- 使 shiro 的注解起作用的 bean. 需要在配置 LifecycleBeanPostProcessor 后才可以起作用 -->
    <bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator"
          depends-on="lifecycleBeanPostProcessor">
        <property name="proxyTargetClass" value="true"/>
    </bean>
    <bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
        <property name="securityManager" ref="securityManager"/>
    </bean>

    <!-- For simplest integration, so that all SecurityUtils.* methods work in all cases, -->
    <!-- make the securityManager bean a static singleton.  DO NOT do this in web         -->
    <!-- applications - see the 'Web Applications' section below instead.                 -->
    <bean class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
        <property name="staticMethod" value="org.apache.shiro.SecurityUtils.setSecurityManager"/>
        <property name="arguments" ref="securityManager"/>
    </bean>

</beans>